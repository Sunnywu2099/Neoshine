<style>
  #shopify-section-{{section.id}}.home-logo .logo-wrapper{
    /* position: relative; */
  }
  .home-logo .marquee-container {
    overflow: hidden;
    position: relative;
    width: 100%;
  }

  .home-logo .marquee-track {
    display: flex;
    width: max-content; /* 关键属性 */
    will-change: transform;
    backface-visibility: hidden;
  }

  .home-logo .logo-item {
    flex: 0 0 auto;
    margin: 0 50px;
    transition: opacity 0.3s;
  }

  @media (max-width: 768px) {
    .home-logo .logo-item {
      margin: 0 20px;
    }
  }
</style>
<div class="marquee-container section-pt">
  <div class="marquee-track"  id="marqueeTrack">
    <!-- 原始内容 -->
    {% for block in section.blocks %}
      <div class="logo-item">{{ block.settings.icon_svg }}</div>
    {% endfor %}
    <!-- 克隆内容实现无缝衔接 -->
  </div>
</div>

<script>
  (function() {
    // 配置参数
    const config = {
      baseSpeed: 0.5,    // 基准滚动速度(px/ms)
      cloneThreshold: 2, // 克隆次数阈值
      pauseOnHover: true
    };

    class Marquee {
      constructor(container) {
        this.track = container.querySelector('.marquee-track');
        this.items = Array.from(this.track.children);
        this.animationFrame = null;
        this.isPaused = false;
        this.position = 0;
        
        this.initClones();
        this.startAnimation();
        this.addEventListeners();
      }

      initClones() {
        // 动态计算所需克隆次数
        const containerWidth = this.track.parentElement.offsetWidth;
        const contentWidth = this.items.reduce((sum, item) => sum + item.offsetWidth, 0);
        const cloneTimes = Math.ceil(containerWidth * config.cloneThreshold / contentWidth);
        
        // 添加克隆元素
        for (let i = 0; i < cloneTimes; i++) {
          this.items.forEach(item => {
            this.track.appendChild(item.cloneNode(true));
          });
        }
      }

      animate(timestamp) {
        if (!this.startTime) this.startTime = timestamp;
        if (this.isPaused) {
          // 如果暂停，继续请求下一帧但不更新位置
          this.animationFrame = requestAnimationFrame(this.animate.bind(this));
          return;
        }
        
        const elapsed = timestamp - this.startTime;
        this.position = (elapsed * config.baseSpeed) % this.track.scrollWidth;
        
        // 使用3D变换触发GPU加速
        this.track.style.transform = `translate3d(-${this.position}px, 0, 0)`;
        
        // 确保继续请求动画帧
        this.animationFrame = requestAnimationFrame(this.animate.bind(this));
      }

      startAnimation() {
        if (!this.animationFrame) {
          this.startTime = null; // 重置开始时间
          this.animationFrame = requestAnimationFrame(this.animate.bind(this));
        }
      }

      addEventListeners() {
        if (config.pauseOnHover) {
          this.track.parentElement.addEventListener('mouseenter', () => this.isPaused = true);
          this.track.parentElement.addEventListener('mouseleave', () => {
            this.isPaused = false;
            this.startAnimation();
          });
        }

        // 响应式重置
        let resizeTimer;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimer);
          resizeTimer = setTimeout(() => {
            // 保存原始项目
            const originalItems = this.items.map(item => item.cloneNode(true));
            
            // 清空现有内容
            this.track.innerHTML = '';
            
            // 重新添加原始项目
            originalItems.forEach(item => this.track.appendChild(item));
            
            // 重新初始化
            this.items = Array.from(this.track.children);
            this.position = 0;
            this.startTime = null;
            this.initClones();
          }, 200);
        });
      }
    }

    // 初始化
    document.addEventListener('DOMContentLoaded', () => {
      const marqueeContainer = document.querySelector('.marquee-container');
      if (marqueeContainer) {
        new Marquee(marqueeContainer);
      }
    });
  })();
</script>


{% schema %}
{
  "name": "Home logo",
  "tag": "section",
  "class": "home-logo",
  "limit": 1,
  "settings": [
  ],
  "blocks": [
    {
      "type": "item",
      "name": "Item",
      "settings": [
        {
          "type": "html",
          "id": "icon_svg",
          "label": "icon svg"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Home logo"
    }
  ]
}
{% endschema %}
