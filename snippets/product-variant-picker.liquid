{% comment %}
  Renders product variant-picker

  Accepts:
  - product: {Object} product object.
  - block: {Object} passing the block information.
  - product_form_id: {String} Id of the product form to which the variant picker is associated.
  Usage:
  {% render 'product-variant-picker', product: product, block: block, product_form_id: product_form_id %}
{% endcomment %}

<style>
  fieldset.product-form__input .explain{
    margin: 0;
    color: #666;
    font-size: 14px;
    margin-top: 5px;
    margin-left: 5px;
  }
</style>


{% capture level_icon %} 
  <svg width="8" height="8" viewBox="0 0 8 8" fill="none" xmlns="http://www.w3.org/2000/svg">
  <path d="M3.62891 6.19629L5.65771 0.988769L7.05664 0.988769L4.28809 7.24365L3.43115 7.24365L3.62891 6.19629ZM1.8418 0.988769L3.91455 6.21094L4.06836 7.24365L3.21875 7.24365L0.442871 0.988769L1.8418 0.988769Z" fill="#505050" style="fill:#505050;fill:color(display-p3 0.3146 0.3146 0.3146);fill-opacity:1;"/>
  </svg>
{% endcapture %}

{%- unless product.has_only_default_variant -%}
  <variant-selects
    id="variant-selects-{{ section.id }}"
    data-section="{{ section.id }}"
    {{ block.shopify_attributes }}
  >
    <div class="variant-title">Over 328 Customers Have Chosen the &nbsp;&nbsp;<span style="text-decoration: underline;">Good-Level</span></div>
    {%- for option in product.options_with_values -%}
      {%- liquid
        assign swatch_count = option.values | map: 'swatch' | compact | size
        assign picker_type = block.settings.picker_type

        if swatch_count > 0 and block.settings.swatch_shape != 'none'
          if block.settings.picker_type == 'dropdown'
            assign picker_type = 'swatch_dropdown'
          else
            assign picker_type = 'swatch'
          endif
        endif
      -%}
      <div class="v-wrapper">
        {%- if picker_type == 'swatch' -%}
          <fieldset class="js product-form__input product-form__input--swatch">
            <legend class="form__label">
              <span class="option_name">{{ option.name }}: </span>
              <div class="custom-option">
                <span data-selected-value>
                {{- option.selected_value -}}
                </span>
                <span style="background-image: url('{{ option.selected_value.swatch.image | image_url: width: 50 }}')" class="swatch"></span>
              </div>
              <span class="level_icon">{{ level_icon }}</span>
            </legend>
            <div class="value-wrapper {% if option.values.size > 3 %}has-level{% endif %}">
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </div>
          </fieldset>
        {%- elsif picker_type == 'button' -%}
          <fieldset class="js product-form__input product-form__input--pill">
            <legend class="form__label">
              <span class="option_name">{{ option.name }}: </span>
              <span data-selected-value>
                {{- option.selected_value -}}
              </span>
              <span class="level_icon">{{ level_icon }}</span>
            </legend>
            <div class="value-wrapper{% if option.values.size > 3 %} has-level{% endif %}">
              {% render 'product-variant-options',
                product: product,
                option: option,
                block: block,
                picker_type: picker_type
              %}
            </div>
            {% comment %} {% if option.name == "Clarity" %}
              <p class="explain"></p>
            {% endif %} {% endcomment %}
          </fieldset>
        {%- else -%}
          <div class="product-form__input product-form__input--dropdown">
            <label class="form__label" for="Option-{{ section.id }}-{{ forloop.index0 }}">
              {{ option.name }}
            </label>
            <div class="select">
              {%- if picker_type == 'swatch_dropdown' -%}
                <span
                  data-selected-value
                  class="dropdown-swatch"
                >
                  {% render 'swatch', swatch: option.selected_value.swatch, shape: block.settings.swatch_shape %}
                </span>
              {%- endif -%}
              <select
                id="Option-{{ section.id }}-{{ forloop.index0 }}"
                class="select__select"
                name="options[{{ option.name | escape }}]"
                form="{{ product_form_id }}"
              >
                {% render 'product-variant-options',
                  product: product,
                  option: option,
                  block: block,
                  picker_type: picker_type
                %}
              </select>
              <span class="svg-wrapper">
                {{- 'icon-caret.svg' | inline_asset_content -}}
              </span>
            </div>
          </div>
        {%- endif -%}
      </div>
    {%- endfor -%}

    <div class="find-size" style="text-decoration: underline;">{{ block.settings.find_size }}</div>

    <script type="application/json" data-selected-variant>
      {{ product.selected_or_first_available_variant | json }}
    </script>
  </variant-selects>
{%- endunless -%}



{% comment %} <script>
    function explain(){
      let list = document.querySelectorAll(".product-form__input--pill");
      list.forEach(item => {
        const explain = item.querySelector(".explain");
        const itemer = item.querySelector("input[type=radio]:checked+label");
        if(explain){
          explain.textContent  = itemer.getAttribute("data-explain");
        }
        
      })
    }
    //常用观察器
    const targetNode = document.querySelector('.product__info-container');
    const observersasdsd = new MutationObserver((mutationsList) => {
      for (const mutation of mutationsList) {
        if (mutation.type === 'childList') {
              explain();
          }
      }
    });
    // 配置观察选项
    const config = {
        attributes: true,
      childList: true,    // 监听子节点的添加或删除
        subtree: true, 
    };
    // 开始观察目标节点
    if (targetNode) {
        observersasdsd.observe(targetNode, config);
    }
</script> {% endcomment %}


